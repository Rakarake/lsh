---- Program Description ----
1. The shell runs commands by forking the process, where the child process
replaces the process with an exec function, while the parent process
either waits, or continues forking processes.
The shell executes commands found in PATH by using the function execvp,
it automatically searches for files in PATH.

2. Background processes are just normal child processes that are given the
same group id as the process id itself, this is to prevent the SIGINT (Ctrl-C)
to reach them. They also are not registered as foreground processes in the
linked list (explained next).

3. When a foreground process is launched, the shell (parent process) registers
the PID of the child process in a linked list.
This is done, so that when a process is caught in the handler for SIGCHLD,
the shell knows 1. if it was a foreground or background process 2. if
all foreground processes have been terminated: in that case, start
reading user input for the next command. If a background process exited,
the shell prints that it happened, this would not be possible without
remembering at least the foreground processes. Also if there are any running
foreground processes, when the background process is catched no new prompt
should be printed.

4. Input/output redirection is firstly initiated early in the RunCommand
function, it creates file handles with the open function if the strings rstdin and
rstdout are not NULL. If any of them fail, the shell informs the user then returns
to the prompt immediately. These file handles are connected to stdin and stdout
in the handle_process function: which is only executed in child processes.
stdin is only connected if at the end of the linked list, and vice versa for
stdout.

5. The cd and exit command are both handled in the beginning of RunCommand,
they are only handled if there are no more entries in the linked list.
If there are more elements then them, the execution of RunCommand continues
and when it is time for cd or exit to be processed after the fork,
they simply exit. This may seem unnecessary, but it is the behaviour of bash,
zsh is a bit different, as it with cd for example actually changes directory,
but only if it is the last entry in the pipe chain.

6. Ctrl-C is ignored by the shell process simply by handling the signal
with a signal handler.

7. Ctrl-C not affecting background processes is described
in 2.

Other points. The linked list storing foreground PID:s is created by the parent
process after the fork. Each individual element is freed when catching
children exiting in the SIGCHLD handler. If an element is in between two other
elements in the list, the "next" value of the previous element is changed
to the next element of the current, typical linked list style.

 ---- All commands run, with names of directories changed (such as lab1 to code) ----
> date
sÃ¶n 25 sep 2022 18:37:00 CEST

> hello
lsh: command not found: hello

// The line above is what prints when a program is not found.
// The child processes all get waited and the resources cleared by the shell.

> ls -al -p
total 124
drwxr-xr-x 3 rakarake rakarake  4096 25 sep 18.36 ./
drwxr-xr-x 5 rakarake rakarake  4096 25 sep 17.34 ../
-rw-r--r-- 1 rakarake rakarake  3115 23 sep 23.51 docs.txt
-rw-r--r-- 1 rakarake rakarake  6148 24 aug  2021 .DS_Store
-rw-r--r-- 1 rakarake rakarake    55 19 sep 18.45 .exrc
-rwxr-xr-x 1 rakarake rakarake 35864 25 sep 18.36 lsh
-rw-r--r-- 1 rakarake rakarake  9449 25 sep 18.32 lsh.c
-rw-r--r-- 1 rakarake rakarake 17936 25 sep 18.36 lsh.o
-rw-r--r-- 1 rakarake rakarake   372 22 sep 19.25 Makefile
-rw-rw-r-- 1 rakarake rakarake  3152  1 jun  2020 parse.c
-rw-r--r-- 1 rakarake rakarake   354 24 sep 00.17 parse.h
-rw-r--r-- 1 rakarake rakarake 11456 25 sep 18.36 parse.o
-rwxr-xr-x 1 rakarake rakarake    28 23 sep 23.51 run.sh
drwxr-xr-x 2 rakarake rakarake  4096 25 sep 16.30 testdir/

> ls -al > tmp.1

> cat < tmp.1 > tmp.2

> diff tmp.1 tmp.2

// The output is what is expected.

> sleep 60 &

> sleep 60 &

> sleep 60
background process terminated: 26410
background process terminated: 26411

// Only the foreground process can be terminated with Ctrl-C (expected behaviour).
// No zombies displayed in top after any of the different operations.

> ls -al | wc -w
146

> ls -al | wc
     17     146     916

> ls | grep lsh | sort -r
lsh.o
lsh.c
lsh

// The prompt reappears

> ls | wc &

> background process terminated: 26490
>      12      12      85
background process terminated: 26489

// The prompt reappears

> cat < tmp.1 | wc > tmp.3

> cat tmp.1 | wc
     16     137     860

> cat tmp.3
     16     137     860

// The should be the same, both practically does the same thing,
// that is, output tmp.1 processed by wc

> abf | wc
lsh: command not found: abf
      0       0       0

> ls | abf
lsh: command not found: abf

> grep apa | ls
docs.txt  lsh  lsh.c  lsh.o  Makefile  parse.c	parse.h  parse.o  run.sh  testdir  tmp.1  tmp.2  tmp.3
I am writing text here in the prompt apa!

// The prompt does not appear since grep does not get an EOF, but it does
// when we press Ctrl-D. This shows that stdin of grep is the same as the shell
// process.

> cd ..

> cd 
.DS_Store              .gitignore             docs/                  prepare-submission.sh
.git/                  code/                  docs.txt               
> cd code

> cd tmp.tmp
cd: no such file or directory: tmp.tmp

// There was an errror.

> cd ..

> cd code | abf
lsh: command not found: abf

> ls
code  docs  docs.txt  prepare-submission.sh

// The cd in the second command did not take effect, this is because
// cd was not the only command, this is the expected behaviour if
// you look at bash for example.

> cd

// This takes me to my home directory, as you can see below

> pwd
/home/rakarake

> cd Projects/lsh/code

> grep exit < tmp.1

// Here the shell did not quit.

> ..exit
lsh: command not found: ..exit

// Here the shell, well did just not recognize the command, not quit

> grep exit | hej
lsh: command not found: hej
^C

// It did not found the command hej, and grep continues to run and has to
// be terminated with Ctrl-C.
// The prompt does not appear unitl Ctrl-C is pressed.

> grep cd | wc
      0       0       0

// The prompt only appears after hitting Ctrl-D.

> exit

// There are no zombies after exit.

