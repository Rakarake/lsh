---- DOCUMENTATION ----
The shell works by, reading from GNU readline, then using the 
parse functions to generate the linked list of "programs" that are going
to be piped together.

The process chain can be run in the background (& symbol), the standard
output and input can also be redirected (to files) with > and < respectively.

In RunCommand (called when hitting enter after text is entered),
the first "program" is forked. That program sets the relevant input/output
streams (opens files if needed). Then this process enters the function:
"process_pgm", where it is processed and makes the pipes to a
child process if there are more elements in the linked list.

If run in background, the parent
sets the pgid to the pid of the child process, this is so that
the child process does not react to SIGINT (Ctrl-C).

SIGINT is captured, so lsh does not die.
SIGCHLD is captured, so we can dtermine if it was a background process
that terminated, or a child process: then we set fgpid (ForeGround PID)
to 0 so that the main code can start reading user input again.
Also a new prompt is printed if needed.

